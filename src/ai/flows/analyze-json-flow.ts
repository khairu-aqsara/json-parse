
'use server';
/**
 * @fileOverview An AI flow to analyze JSON data, generate a suggested Zod schema, and provide insights.
 *
 * - analyzeJsonData - A function that handles the JSON analysis process.
 * - AnalyzeJsonInput - The input type for the analyzeJsonData function.
 * - AnalyzeJsonOutput - The return type for the analyzeJsonData function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";

const AnalyzeJsonInputSchema = z.object({
  jsonString: z.string().describe('The raw JSON string to be analyzed.'),
  apiKey: z.string().optional().describe('Optional Gemini API Key to use for this request.'),
});
export type AnalyzeJsonInput = z.infer<typeof AnalyzeJsonInputSchema>;

const AnalyzeJsonOutputSchema = z.object({
  suggestedZodSchema: z
    .string()
    .describe(
      'A Zod schema string generated by the AI, representing the structure of the input JSON. This schema should be copy-pasteable TypeScript code.'
    ),
  dataInsights: z
    .string()
    .describe(
      'Human-readable insights about the JSON data, its structure, potential characteristics, or what it might represent. This should be a concise summary.'
    ),
});
export type AnalyzeJsonOutput = z.infer<typeof AnalyzeJsonOutputSchema>;

export async function analyzeJsonData(input: AnalyzeJsonInput): Promise<AnalyzeJsonOutput> {
  return analyzeJsonFlow(input);
}

const PROMPT_TEMPLATE = `You are an expert data analyst and TypeScript developer specializing in Zod schemas.
Given the following JSON data, please perform two tasks:

1.  **Generate a Zod Schema:** Create a Zod schema string that accurately represents the structure of this JSON.
    *   The schema should be as precise as possible.
    *   Infer types like strings, numbers, booleans, arrays (with element types if possible), and objects (with their properties).
    *   Ensure the output is a valid Zod schema string ready to be used in TypeScript.
    *   Example: \`z.object({{'{'}} name: z.string(), age: z.number() {{'}'}})\`

2.  **Provide Data Insights:** Write a brief (2-4 sentences) human-readable insight into the data.
    *   This could include identifying the main entities or purpose of the data, common patterns, or any notable characteristics.
    *   Example: "This JSON appears to represent a list of user profiles, each containing contact information and activity logs."

JSON Data:
\`\`\`json
{{{jsonString}}}
\`\`\`

Return your response as a valid JSON object with two keys: "suggestedZodSchema" (string) and "dataInsights" (string).
For example:
{
  "suggestedZodSchema": "z.object({ ... })",
  "dataInsights": "This data appears to be..."
}
`;

const analyzeJsonFlow = ai.defineFlow(
  {
    name: 'analyzeJsonFlow',
    inputSchema: AnalyzeJsonInputSchema,
    outputSchema: AnalyzeJsonOutputSchema,
  },
  async (input) => {
    // Basic validation for jsonString
    try {
      JSON.parse(input.jsonString);
    } catch (e) {
      throw new Error("Invalid JSON string provided for analysis.");
    }
    if (input.jsonString.trim().length < 2) { // Minimal JSON is '{}' or '[]'
        throw new Error("JSON string is too short to be meaningful for analysis.");
    }

    // Explicitly check for a present and non-empty API key
    if (!input.apiKey || input.apiKey.trim() === '') {
      throw new Error("A Gemini API Key is required for AI analysis. Please set it in the API Key Settings.");
    }

    // API key is present, proceed with direct SDK usage
    const genAI = new GoogleGenerativeAI(input.apiKey.trim());
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash-latest", // Model for direct SDK usage
      safetySettings: [
          { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
          { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
          { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
          { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
      ],
      generationConfig: {
        responseMimeType: "application/json",
      }
    });
    
    const interpolatedPrompt = PROMPT_TEMPLATE.replace('{{{jsonString}}}', input.jsonString);

    try {
      const result = await model.generateContent(interpolatedPrompt);
      const response = result.response;

      if (!response) {
        throw new Error("AI model did not return a valid response object.");
      }
      const text = response.text();
       if (text === null || text === undefined || text.trim() === "") {
        throw new Error("AI model returned an empty or invalid response text.");
      }
      
      const parsedOutput = JSON.parse(text);
      const validatedOutput = AnalyzeJsonOutputSchema.parse(parsedOutput);
      return validatedOutput;

    } catch (e: any) {
      let descriptiveError = `AI analysis failed.`;
      if (e.message?.toLowerCase().includes("api key not valid")) {
           descriptiveError = "The provided API key is not valid. Please check your Gemini API Key in settings and ensure it has the correct permissions.";
      } else if (e.message?.toLowerCase().includes("access token scope")) {
          descriptiveError = "The provided API key may have insufficient permissions (scope). Please check the API key configuration in your Google Cloud project."
      } else if (e.message?.toLowerCase().includes("billing") || e.message?.includes("quota") || e.message?.includes("è•—")) {
           descriptiveError = "AI analysis failed. This might be due to API quota limits or billing issues with your Google Cloud project. Please check your project configuration.";
      } else if (e.message?.toLowerCase().includes("failed_precondition") && e.message?.toLowerCase().includes("api key")) {
          descriptiveError = "AI analysis failed: API key issue. Ensure the key is correct, active, and the Gemini API is enabled in your Google Cloud project with billing set up.";
      } else if (e.message?.toLowerCase().includes("access withheld") || e.message?.toLowerCase().includes("permission denied")) {
          descriptiveError = "AI analysis failed: Access to the model was denied. This may be due to regional restrictions, API permissions, or other policy enforcement. Please check your API key and project settings."
      } else {
          descriptiveError = `AI analysis failed: ${e.message || "An unknown error occurred."}`;
      }
      // For debugging, you might want to log the original error on the server
      // console.error("Original AI analysis error with custom key:", e.message, e.stack);
      throw new Error(descriptiveError);
    }
  }
);

