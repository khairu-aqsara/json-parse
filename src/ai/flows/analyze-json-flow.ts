
'use server';
/**
 * @fileOverview An AI flow to analyze JSON data, generate a suggested Zod schema, and provide insights.
 *
 * - analyzeJsonData - A function that handles the JSON analysis process.
 * - AnalyzeJsonInput - The input type for the analyzeJsonData function.
 * - AnalyzeJsonOutput - The return type for the analyzeJsonData function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";

const AnalyzeJsonInputSchema = z.object({
  jsonString: z.string().describe('The raw JSON string to be analyzed.'),
  apiKey: z.string().optional().describe('Optional Gemini API Key to use for this request.'),
});
export type AnalyzeJsonInput = z.infer<typeof AnalyzeJsonInputSchema>;

const AnalyzeJsonOutputSchema = z.object({
  suggestedZodSchema: z
    .string()
    .describe(
      'A Zod schema string generated by the AI, representing the structure of the input JSON. This schema should be copy-pasteable TypeScript code.'
    ),
  dataInsights: z
    .string()
    .describe(
      'Human-readable insights about the JSON data, its structure, potential characteristics, or what it might represent. This should be a concise summary.'
    ),
});
export type AnalyzeJsonOutput = z.infer<typeof AnalyzeJsonOutputSchema>;

export async function analyzeJsonData(input: AnalyzeJsonInput): Promise<AnalyzeJsonOutput> {
  // The analyzeJsonFlow will be called with the full input, including apiKey
  return analyzeJsonFlow(input);
}

const PROMPT_TEMPLATE = `You are an expert data analyst and TypeScript developer specializing in Zod schemas.
Given the following JSON data, please perform two tasks:

1.  **Generate a Zod Schema:** Create a Zod schema string that accurately represents the structure of this JSON.
    *   The schema should be as precise as possible.
    *   Infer types like strings, numbers, booleans, arrays (with element types if possible), and objects (with their properties).
    *   Ensure the output is a valid Zod schema string ready to be used in TypeScript.
    *   Example: \`z.object({{'{'}} name: z.string(), age: z.number() {{'}'}})\`

2.  **Provide Data Insights:** Write a brief (2-4 sentences) human-readable insight into the data.
    *   This could include identifying the main entities or purpose of the data, common patterns, or any notable characteristics.
    *   Example: "This JSON appears to represent a list of user profiles, each containing contact information and activity logs."

JSON Data:
\`\`\`json
{{{jsonString}}}
\`\`\`

Return your response as a valid JSON object with two keys: "suggestedZodSchema" (string) and "dataInsights" (string).
For example:
{
  "suggestedZodSchema": "z.object({ ... })",
  "dataInsights": "This data appears to be..."
}
`;


const analyzeJsonPromptForDefaultUsage = ai.definePrompt({
  name: 'analyzeJsonPrompt',
  input: {schema: AnalyzeJsonInputSchema.pick({jsonString: true})}, // Only jsonString for default
  output: {schema: AnalyzeJsonOutputSchema},
  prompt: PROMPT_TEMPLATE,
});

const analyzeJsonFlow = ai.defineFlow(
  {
    name: 'analyzeJsonFlow',
    inputSchema: AnalyzeJsonInputSchema, // Full input schema including apiKey
    outputSchema: AnalyzeJsonOutputSchema,
  },
  async (input) => {
    // Basic validation: check if jsonString is potentially valid JSON before sending to AI
    try {
      JSON.parse(input.jsonString);
    } catch (e) {
      throw new Error("Invalid JSON string provided for analysis.");
    }

    if (input.jsonString.trim().length < 2) { // Minimal JSON is '{}' or '[]'
        throw new Error("JSON string is too short to be meaningful for analysis.");
    }

    if (input.apiKey) {
      const genAI = new GoogleGenerativeAI(input.apiKey);
      // The model ID 'gemini-1.5-flash-latest' corresponds to 'googleai/gemini-2.0-flash' in genkit.ts
      const model = genAI.getGenerativeModel({ 
        model: "gemini-1.5-flash-latest",
        safetySettings: [
            { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
            { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
            { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
            { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
        ],
        generationConfig: {
          responseMimeType: "application/json",
        }
      });
      
      const interpolatedPrompt = PROMPT_TEMPLATE.replace('{{{jsonString}}}', input.jsonString);

      try {
        const result = await model.generateContent(interpolatedPrompt);
        const response = result.response;
        const text = response.text();
        
        // Parse the JSON string response from the model
        const parsedOutput = JSON.parse(text);
        // Validate the parsed output against our Zod schema
        const validatedOutput = AnalyzeJsonOutputSchema.parse(parsedOutput);
        return validatedOutput;

      } catch (e: any) {
        // Handle potential errors from API call or parsing/validation
        if (e.message?.includes("API key not valid")) {
             throw new Error("API key not valid. Please pass a valid API key.");
        }
        console.error("Error during AI analysis with custom API key:", e.message);
        console.error("Raw AI output (if available):", e.message.includes("JSON.parse") ? text : "N/A");
        throw new Error(`AI analysis failed with custom key: ${e.message}`);
      }
    } else {
      // Use the default Genkit configured AI (which might use env variables or ADC)
      const {output} = await analyzeJsonPromptForDefaultUsage({jsonString: input.jsonString});
      if (!output) {
        throw new Error('AI analysis did not produce an output (default Genkit path).');
      }
      return output;
    }
  }
);
